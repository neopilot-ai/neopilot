from __future__ import annotations

import json
from typing import Any, Type

from neoai_workflow_service.tools.neoai_base_tool import NeoaiBaseTool
from neoai_workflow_service.tools.vulnerabilities.queries.vulnerabilities import \
    GET_VULNERABILITY_DETAILS_QUERY
from pydantic import BaseModel, Field


class GetVulnerabilityDetailsInput(BaseModel):
    vulnerability_id: str = Field(
        description="The numeric ID of the vulnerability (e.g., '567'), as seen in the main project Vulnerability Report. Do not use a UUID here.",
    )


class GetVulnerabilityDetails(NeoaiBaseTool):
    """Tool for fetching detailed information about a persisted project vulnerability."""

    name: str = "get_vulnerability_details"
    description: str = """Use this tool to get details for a specific vulnerability identified by its numeric ID.

    A "Vulnerability" is a persisted security issue found in the main project Vulnerability Report, identified by a simple numeric ID.

    **Use this tool when you have a numeric ID (e.g., '567').**

    This tool provides comprehensive details including:
    - Basic vulnerability information (title, state, description, severity)
    - Location details (file paths, line numbers, etc.)
    - CVE enrichment data (EPSS scores, known exploits)
    - Detection pipeline information
    - Detailed vulnerability report data with nested structures

    This is different from a "Security Finding", which is a potential issue from a pipeline scan and has a UUID.
    **Do NOT use this tool for UUIDs; use the 'get_security_finding_details' tool when you have a UUID.**


    For example:
        get_vulnerability_details(vulnerability_id="567")
    """
    args_schema: Type[BaseModel] = GetVulnerabilityDetailsInput  # type: ignore

    async def _execute(self, **kwargs: Any) -> str:
        vulnerability_id = kwargs.pop("vulnerability_id")

        try:
            # Convert numeric ID to full GraphQL ID format
            if not vulnerability_id.isdigit():
                return json.dumps({"error": f"Invalid vulnerability ID: {vulnerability_id}. Must be numeric."})
            full_vulnerability_id = f"gid://gitlab/Vulnerability/{vulnerability_id}"
            variables = {
                "vulnerabilityId": full_vulnerability_id,
            }

            response = await self.gitlab_client.apost(
                path="/api/graphql",
                body=json.dumps({"query": GET_VULNERABILITY_DETAILS_QUERY, "variables": variables}),
            )

            response = self._process_http_response(identifier="GetVulnerabilityDetails", response=response)

            if "errors" in response:
                return json.dumps({"error": response["errors"]})

            vulnerability = response.get("data", {}).get("vulnerability")

            if not vulnerability:
                return json.dumps({"error": f"Vulnerability with ID {vulnerability_id} not found"})

            return json.dumps({"vulnerability": vulnerability})
        except Exception as e:
            return json.dumps({"error": str(e)})

    def format_display_message(self, args: GetVulnerabilityDetailsInput, _tool_response: Any = None) -> str:
        return f"Get details for vulnerability {args.vulnerability_id}"
